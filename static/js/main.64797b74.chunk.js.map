{"version":3,"sources":["Snake.js","Food.js","App.js","serviceWorker.js","index.js"],"names":["props","snakeDots","map","dot","i","style","left","top","className","key","getRandomeCoordinate","Math","floor","random","initialState","food","direction","speed","App","state","onKeyDown","el","window","event","keyCode","setState","moveSnake","dots","head","length","push","shift","setInterval","this","document","onkeydown","checkItOut","checkItCollapsed","chekIfSnakeEat","onGameOver","snake","pop","forEach","enlargedSnake","increaseSpeed","newSnake","unshift","alert","Snake","Food","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.64797b74.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default (props) => {\n  return (\n    <div>\n      {props.snakeDots.map((dot, i) => {\n        const style = {\n          left: `${dot[0]}%`,\n          top: `${dot[1]}%`,\n        };\n        return <div className=\"snake-dot\" key={i} style={style}></div>;\n      })}\n    </div>\n  );\n};\n","import React from \"react\"\n\nexport default (props) => {\n    \n    const style = {\n        left: `${props.dot[0]}%`,\n        top: `${props.dot[1]}%`\n    }\n    return (\n        <div className=\"snake-food\" style={style}></div>\n    )\n}","import React, { Component } from \"react\";\nimport Snake from \"./Snake\";\nimport Food from \"./Food\";\n\nconst getRandomeCoordinate = () => {\n  const min = 1;\n  const max = 98;\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  return [x, y];\n};\nconst initialState = {\n  food: getRandomeCoordinate(),\n  direction: \"RIGHT\",\n  speed: 200,\n  snakeDots: [\n    [0, 0],\n    [2, 0],\n  ],\n};\nclass App extends Component {\n  state = initialState;\n  componentDidMount() {\n    setInterval(this.moveSnake, this.state.speed);\n    document.onkeydown = this.onKeyDown;\n  }\n  componentDidUpdate() {\n    this.checkItOut();\n    this.checkItCollapsed();\n    this.chekIfSnakeEat();\n  }\n  onKeyDown = (el) => {\n    el = el || window.event;\n    switch (el.keyCode) {\n      case 38:\n        this.setState({ direction: \"UP\" });\n        break;\n      case 40:\n        this.setState({ direction: \"DOWN\" });\n        break;\n      case 37:\n        this.setState({ direction: \"LEFT\" });\n        break;\n      case 39:\n        this.setState({ direction: \"RIGHT\" });\n        break;\n    }\n  };\n  moveSnake = () => {\n    let dots = [...this.state.snakeDots];\n    let head = dots[dots.length - 1];\n    switch (this.state.direction) {\n      case \"RIGHT\":\n        head = [head[0] + 2, head[1]];\n        break;\n      case \"LEFT\":\n        head = [head[0] - 2, head[1]];\n        break;\n      case \"DOWN\":\n        head = [head[0], head[1] + 2];\n        break;\n      case \"UP\":\n        head = [head[0], head[1] - 2];\n        break;\n    }\n    dots.push(head);\n    dots.shift();\n    this.setState({\n      snakeDots: dots,\n    });\n  };\n  checkItOut() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    if (head[0] >= 100 || head[0] < 0 || head[1] >= 100 || head[1] < 0) {\n      this.onGameOver();\n    }\n  }\n  checkItCollapsed() {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach((dot) => {\n      if (head[0] === dot[0] && head[1] === dot[1]) {\n        this.onGameOver();\n      }\n    });\n  }\n  chekIfSnakeEat(){\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    let food = this.state.food;\n    if (head[0] === food[0] && head[1] === food[1]){\n      this.setState({\n        food: getRandomeCoordinate()\n      })\n      this.enlargedSnake();\n      this.increaseSpeed()\n    }\n  }\n  enlargedSnake(){\n    let newSnake = [...this.state.snakeDots];\n    newSnake.unshift([]);\n    this.setState({\n      snakeDots: newSnake\n    })\n  }\n  increaseSpeed(){\n    if (this.setState.speed > 10){\n      this.setState({\n        speed: this.setState.speed - 10\n    })\n    }\n  }\n  onGameOver() {\n    alert(`Game Over, your result: ${this.state.snakeDots.length}`);\n    this.setState(initialState);\n  }\n  render() {\n    return (\n      <div className=\"game-area\">\n        <Snake snakeDots={this.state.snakeDots} />\n        <Food dot={this.state.food} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}